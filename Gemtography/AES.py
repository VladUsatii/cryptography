"""
Utility functions used in AES
"""
import sys, os, binascii, random

s_box = (
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

inv_s_box = (
	0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
	0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
	0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
	0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
	0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
	0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
	0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
	0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
	0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
	0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
	0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
	0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
	0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
	0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
	0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)

r_con = (
	0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
	0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
	0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A,
	0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39,
)

xtime = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)

def add_round_key(s, k):
	for x in range(4):
		for y in range(4):
			s[x][y] ^= k[x][y]

def sub_bytes(s):
	for x in range(4):
		for y in range(4):
			s[x][y] = s_box[s[x][y]]

def inv_sub_bytes(s):
	for x in range(4):
		for y in range(4):
			s[x][y] = inv_s_box[s[x][y]]

def shift_rows(s):
	s[0][1], s[1][1], s[2][1], s[3][1] = s[1][1], s[2][1], s[3][1], s[0][1]
	s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2]
	s[0][3], s[1][3], s[2][3], s[3][3] = s[3][3], s[0][3], s[1][3], s[2][3]

def inv_shift_rows(s):
	s[0][1], s[1][1], s[2][1], s[3][1] = s[3][1], s[0][1], s[1][1], s[2][1]
	s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2]
	s[0][3], s[1][3], s[2][3], s[3][3] = s[1][3], s[2][3], s[3][3], s[0][3]

def mix_single_col(s):
	t = s[0] ^ s[1] ^ s[2] ^ s[3]
	u = s[0]
	s[0] ^= t ^ xtime(s[0] ^ s[1])
	s[1] ^= t ^ xtime(s[1] ^ s[2])
	s[2] ^= t ^ xtime(s[2] ^ s[3])
	s[3] ^= t ^ xtime(s[3] ^ u)

def mix_cols(s):
	for x in range(4):
		mix_single_col(s[x])

def inv_mix_cols(s):
	for i in range(4):
		u = xtime(xtime(s[i][0] ^ s[i][2]))
		v = xtime(xtime(s[i][1] ^ s[i][3]))
		s[i][0] ^= u
		s[i][1] ^= v
		s[i][2] ^= u
		s[i][3] ^= v

	mix_cols(s)

def XOR(hexed_a, hexed_b) -> hex:
	return hex(int(hexed_a, 16) ^ int(hexed_b, 16))

def xor_bytes(a, b) -> bytes:
	return bytes(i^j for i, j in zip(a,b))

def pad_PKC55(data: bytes) -> bytes:
	pad_len = 16 - (len(data) % 16)
	return data + bytes([pad_len] * pad_len)

def unpad_PKC55(data: bytes) -> bytes:
	assert data[-1] > 0, "Incorrect padding."

	pad_len = data[-1]
	msg, padding = data[:-pad_len], data[-pad_len:]

	assert all(p == pad_len for p in padding)

	return msg


"""
AES CBC Mode Implementation

Author: Vlad Usatii @ gemcoin

Description: This is the implementation that I made for Cryptography I at Stanford MOOC. It is pure Python3 with no cryptography imports. The IV is prepended to the ciphertext.

"""
class AES_CBC_MODE(object):
	rounds_by_key_size = {16: 10, 24: 12, 32: 14}
	def __init__(self, key: bytes, key_len=128):
		if len(key) == 16 and isinstance(key, bytes):
			self.key = key
		else:
			raise Exception("Key must be 16 random bytes.")

		if key_len in [128, 192, 256]:
			self.key_len = key_len
		else:
			raise Exception("Key length must be 128, 192, or 256 bits.")

		assert len(key) in AES_CBC_MODE.rounds_by_key_size, "Invalid key."

		self.n_rounds = AES_CBC_MODE.rounds_by_key_size[len(key)]
		self._key_matrices = self._expand_key(key)

	def _expand_key(self, key):
		cols = self.toMatrix(key)
		iter_size = len(key) // 4

		i = 1
		while len(cols) < (self.n_rounds + 1) * 4:
			word = list(cols[-1])

			# key scheduling
			if len(cols) % iter_size == 0:
				word.append(word.pop(0))
				word = [s_box[b] for b in word]
				word[0] ^= r_con[i]
				i += 1
			elif len(key) == 32 and len(cols) % iter_size == 4:
				# run the word through S-box in 4th iter with {0,1}^8 key
				word = [s_box[b] for b in word]

			word = xor_bytes(word, cols[-iter_size])
			cols.append(word)

		expansion = [cols[4*i : 4*(i+1)] for i in range(len(cols) // 4)]
		return expansion

	# checks if data has been inputted correctly before encryption.
	def prereqs(self, iv, data) -> bool:
		assert len(iv) == 16, "Must be an IV of length 16 bytes."
		assert isinstance(iv, bytes), "IV must be of type bytes."
		assert len(data) > 0, "Data can not be empty."
		assert isinstance(data, bytes), "Data must be of type bytes."

		return True

	# converts 16-byte arrays to a 4x4 matrix, or from a matrix to bytearray.
	def toMatrix(self, pt) -> list:
		return [list(pt[i:i+4]) for i in range(0, len(pt), 4)]
	def toBytes(self, matrix) -> bytes:
		return bytes(sum(matrix, []))

	# splits blocks before feeding them into rounds with round key
	def block_split(self, pt, block_size=16, pad=True):
		assert len(pt) % block_size == 0 or not pad, f"Your plaintext size: {len(pt)}"
		return [pt[i:i+16] for i in range(0, len(pt), block_size)]

	def encrypt_block(self, xored_bytes) -> bytes:
		assert len(xored_bytes) == 16, "This encryption function only supports split blocks."

		p_state = self.toMatrix(xored_bytes)
		add_round_key(p_state, self._key_matrices[0])

		for x in range(1, self.n_rounds):
			sub_bytes(p_state)
			shift_rows(p_state)
			mix_cols(p_state)
			add_round_key(p_state, self._key_matrices[x])

		sub_bytes(p_state)
		shift_rows(p_state)
		add_round_key(p_state, self._key_matrices[-1])
		return self.toBytes(p_state)

	def decrypt_block(self, ct):
		assert len(ct) == 16, "Ciphertext is of the wrong format."
		c_state = self.toMatrix(ct)

		add_round_key(c_state, self._key_matrices[-1])
		inv_shift_rows(c_state)
		inv_sub_bytes(c_state)

		for x in range(self.n_rounds - 1, 0, -1):
			add_round_key(c_state, self._key_matrices[x])
			inv_mix_cols(c_state)
			inv_shift_rows(c_state)
			inv_sub_bytes(c_state)

		add_round_key(c_state, self._key_matrices[0])
		return self.toBytes(c_state)

	def encrypt(self, data: bytes, iv: bytes) -> bytes:
		prereqs = self.prereqs(iv, data)
		if prereqs is not True: raise Exception("Data does not match prerequisites for encryption.")

		plaintext = pad_PKC55(data)
		blocks = []
		previous = iv
		for pt_block in self.block_split(plaintext):
			block = self.encrypt_block(xor_bytes(pt_block, previous))
			blocks.append(block)
			previous = block
		return b''.join(blocks)

	def decrypt(self, data: bytes, iv: bytes) -> bytes:
		assert len(iv) == 16, "Invalid IV length."

		blocks = []
		previous = iv
		for ct_block in self.block_split(data):
			blocks.append(xor_bytes(previous, self.decrypt_block(ct_block)))
			previous = ct_block
		return unpad_PKC55(b''.join(blocks))

	def encrypt_with_IV(self, data: bytes, iv: bytes) -> bytes:
		return b''.join([iv, self.encrypt(data, iv)])

	def decrypt_with_IV(self, data: bytes) -> bytes:
		iv = data[:16]
		ct = data[16:]
		return self.decrypt(ct, iv)

	def __repr__(self):
		return f'AES_CBC(key={self.key} , key_len=' + str(self.key_len) + ')'


"""
AES CTR Mode Implementation

Author: Vlad Usatii @ gemcoin

Description: This is the implementation that I made for Cryptography I at Stanford MOOC. It is pure Python3 with no cryptography imports. The IV is prepended to the ciphertext.

"""
def inc_bytes(a) -> bytes:
	op = list(a)
	for x in reversed(range(len(op))):
		if op[x] == 0xFF:
			op[x] = 0
		else:
			op[x] += 1
			break
	return bytes(op) # increments by 1

class AES_CTR_MODE(object):
	def __init__(self, key: bytes):
		self.a = AES_CBC_MODE(key)

	def encrypt(self, pt: bytes, iv: bytes) -> bytes:
		assert len(iv) == 16, "Incorrect IV length."

		blocks = []
		nonce = iv
		for pt_block in self.a.block_split(pt, pad=False):
			block = xor_bytes(pt_block, self.a.encrypt_block(nonce))
			blocks.append(block)
			nonce = inc_bytes(nonce)

		return b''.join(blocks)

	def decrypt(self, ct: bytes, iv: bytes) -> bytes:
		assert len(iv) == 16, "Incorrect IV length."

		blocks = []
		nonce = iv
		for ct_block in self.a.block_split(ct, pad=False):
			block = xor_bytes(ct_block, self.a.encrypt_block(nonce))
			blocks.append(block)
			nonce = inc_bytes(nonce)
		return b''.join(blocks)

	def encrypt_with_IV(self, data: bytes, iv: bytes) -> bytes:
		return b''.join([iv, self.encrypt(data, iv)])

	def decrypt_with_IV(self, data: bytes) -> bytes:
		return self.decrypt(data[16:], data[:16])
